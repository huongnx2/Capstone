version: 2.1

orbs:
  node: circleci/node@5.0.3
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1
  aws-cli: circleci/aws-cli@3.1.3
  
commands:

  install_awscli:
    description: Install aws cli
    steps:
      - run:
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy cloudformation stack given a stack name.
    parameters:
      stack-name:
        type: string
        default: ${STACK_NAME}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo << parameters.stack-name >> \
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>

jobs:
  lint-infras:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install cfn lint
          command: |
            pip install cfn-lint
      - run:
          name: Validate CloudFormation template
          command: |
            cfn-lint infras/infras.yml

  deploy-infras:
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Deploy Cloudformation Template with new Docker image
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
            --template-file infras/infras.yml \
            --parameter-overrides $(jq -r '.[] | [.ParameterKey, .ParameterValue] | "\(.[0])=\(.[1])"' ./infras/infras-params.json) \
            --stack-name << parameters.stack-name >> \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - destroy-environment
            
  lint-frontend:
    docker:
      - image: node:13.8.0
    steps:
      - checkout
      - run:
          name: Check lint code
          command: |
            cd capstone-demo
            npm install
            npm run test

  build-frontend:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/capstone-demo.tar
      - run:
          name: Load Docker image layer cache
          command: |
            # set +o pipefail
            if [[ -f "/caches/app.tar" ]]; then
              docker load -i /caches/app.tar | true
            fi
      - run:
          name: Build front-end
          command: |
            cd capstone-demo
            docker build -t huongnx2/capstone-demo .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/capstone-demo.tar huongnx2/capstone-demo
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/capstone-demo.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push huongnx2/capstone-demo:latest
      
  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          EKS Cluster Name
        type: string
    steps:
      - checkout
      - install_awscli
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Install envsubst
          command: |
            curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
            chmod +x envsubst
            sudo mv envsubst /usr/local/bin
      - run:
          name: Restart image
          command: |
            kubectl get service > service.txt
            if grep -q 'capstone-demo' service.txt; then
              kubectl describe service capstone-demo > capstone.txt
              if grep -q "role=green" capstone.txt; then
                echo 'export COLOR=blue' >> "$BASH_ENV"
              else
                echo 'export COLOR=green' >> "$BASH_ENV"
              fi
            else
              echo 'export COLOR=blue' >> "$BASH_ENV"
            fi
            source "$BASH_ENV"
      - run:
          name: Replace variable
          command: |
            envsubst < kubernetes-conf/deployment.yml > kubernetes-conf/deployment.yml.temp && cp -f kubernetes-conf/deployment.yml.temp kubernetes-conf/deployment.yml
            envsubst < kubernetes-conf/service.yml > kubernetes-conf/service.yml.temp && cp -f kubernetes-conf/service.yml.temp kubernetes-conf/service.yml
            echo "######"
            cat kubernetes-conf/deployment.yml
            echo "######"
            cat kubernetes-conf/service.yml
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "kubernetes-conf/deployment.yml"
          resource-name: deployment/capstone-demo-$COLOR
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "kubernetes-conf/service.yml"
          resource-name: deployment/capstone-demo-$COLOR
      - kubernetes/update-container-image:
          get-rollout-status: true
          container-image-updates: "capstone-frontend=binhnguyen058/capstone-frontend:latest"
          resource-name: deployment/capstone-demo-$COLOR
      - run:
          name: Restart image
          command: |
            kubectl rollout restart deployment/capstone-demo-$COLOR
      - destroy-environment

workflows:
  capstone:
    jobs:
      - lint-infras
      - deploy-infras:
          stack-name: ${STACK_NAME}
          requires:
            - lint-infras
      - lint-frontend
      - build-frontend:
          requires:
            - lint-frontend
      - deploy-frontend:
          cluster-name: "EKSClusterCapstone"
          requires:
            - build-frontend
            - deploy-infras